    log(0)    log(1/e)    log(1)    log(e)    log(e^n)    log(Inf)
    -Inf        -1          0         1           n         +Inf


    d(log(x))    1
    --------- = ----                              x*log(x)
       dx        x
       

    x > 0,         +log( 1 / x ) =   -log( x )
    x,y > 0,       +log( x * y ) =   +log( x ) + log( y )
    x,y > 0,       +log( x / y ) =   +log( x ) - log( y )
    x > -          +log( x ^ v ) =   +log( x ) *  v



for x > 2
    fr,ex = frexp(x)
    log(x) = (ex * log(2)) + log(fr)   where  [0.5 <= fr < 1.0)
for x     
    
    

      function logx(x::DD)
          n = trailing_zeros(prevpow2(floor(Int,x.hi)))
          fr,ex = frexp(x); y = ldexp(fr,ex-n)
          logy = log(y)
          loga = DD(n) * (FLOAT128.dd_log2)
          logy+loga
       end


   log1p(x) = log( 1 + x ) using  log1p(x) = 2 * log1p( x / (1 + sqrt(1 + x)) )
   
   log1p(x) = log( 1 + x ) using y st (1 + x) = (1 + y) / (1 - y)
                                            y =       x / (2 + x)
        where
        log(1+x) == log( (1+y)/(1-y) ) = 2 * Sum[j>=0]( (y^(2*j + 1)) / (2*j + 1) )
        
            saves half the terms and reduces the argument: if x>0, y < x/2
        
      function logOfOnePlusX(x)
         y = x /( 2 + x ); z = x
         j = 0
         s = 0
         while j<1_000 && z!= s 
            z = s; twojp1 = j+j+1
            j = j+1
            yj = y^(twojp1)
            s = s + yj/twojp1
         end
         2*s, j
       end


   log( (1 - x) / (1 + x) ) = (-2*x) * ( 1+ (x^2)/3 + (x^4)/5 + (x^6)/7 + ... ) 
                            = (-2*x) * 2F1(1,1/2;3/2;x^2)                        hypergeometric
                                                                                 change variables
    log( y ) = (-2)*((1-y)/(1+y))*(2F1(1,1/2; 3/2; ((1-y)/(1+y))^2 )            for 0 < y < Inf                                          
    

For arguments close to unity, approaching from above or from below, this approximation is valid:

  x st |x-1| small,   log(x) ~ (x-1) / sqrt(x)
  with Float64,       log(x) - ((x-1)/sqrt(x)) 
       becomes zero over                            there is no numerical difference
       (1.0 - 0.425e-7) .. (1.0 + 0.425e-7)         1.0-0.425e-7                1.0+0.425e-7
         (0.9999999575) .. (1.0000000425)                         (x-1)/sqrt(x)
         
  with DD, becomes zero over
      DD(1.0, -0.5e-16) .. DD(1.0, 0.5e-16)
                 (x-1) / sqrt(x)                    in that interval use the approximation



  with lgx = f(x) == log(x)
                                         lgx( exp(k) ) == k
       
  
       lgx( exp(1) ) - lgx( 1/exp(1) )                                      =  2
                       lgx( 1/exp(1) ) - lgx( 1/exp(3) )                    =  2
                                         lgx( 1/exp(3) ) - lgx( 1/exp(5) )  =  2


        lgx( exp(5) ) - lgx( exp(3) )                  =  2
                        lgx( exp(3) ) - lgx( exp(1) )  =  2
                        

Log(1 + x)
|Arg(1 - (z^2 / (2 + z)^2))| < pi
these can be used for the evaluation
  w_n(z)  = (2n - 1) * ( ((-(2+z)) + (2*(sqrt(1+z)))) / (2) )
  w_n1(z) = w_n(z)   - ( (z^2) / (8 * (2n+1)) * (sqrt(1+z)) )
  
  w(z,n)  = (2*n - 1) * ( ((-(2+z)) + (2*(sqrt(1+z)))) / (2)  )
  w1(z,n) = w(z,n)    - ( (z^2) / (8 * (2*n+1)) * (sqrt(1+z)) )



